% Python for Everybody
% Exploring Data Using Python 3
% Charles R. Severance

왜 프로그래밍을 배워야 하는가?
=======================================

프로그램을 작성하는일 (혹은 프로그래밍) 은 아주 창의적이며 가치있는 일이다.
우리가 프로그램을 작성하는 이유는 직업으로서 복잡한 자료분석이 필요하기 때문이거나, 단지 재미로서 누군가의 어려움을 해결해주기위한 일에 이르기까지 다양하다.
이 책은 우리들 *모두* 가 프로그래밍을 배워야 할 필요가 있다는것을 전제로 하며, 학습을 마치고난 후 에는 새롭게 배운 이 기술을 가지고 어떤 일을 하고 싶은지 생각이 피어오를것이다.

랩탑에서 휴대전화에 이르기까지, 우리의 일상은 컴퓨터들로 둘러싸여 있다.
우리를 대신해 많은 것들을 처리해 주는 이러한 컴퓨터를 개인비서(Personal Assistants)쯤으로 생각할수도 있다.
일상의 컴퓨터, 그 일부를 구성하는 하드웨어는 본질적으로 다음과 같이 질문을 끊임없이 하도록 만들어져 있다. "다음으로 해야 할 일은 무엇입니까?"

![Personal Digital Assistant](height=1.0in@../images/pda)

프로그래머는 이러한 하드웨어에 운영체제와 여러 응용프로그램을 추가함으로써 사람을 도와 다른 많은 것들을 할 수 있도록 하는 개인 휴대 정보 단말(Personal Digital Assistant, PDA)의 탄생에 까지 이르도록 하였다.

만약 컴퓨터가 알아 듣을수 있는 언어로 우리가 "다음으로 하려는 것을" 설명할 수 있다면, 컴퓨터는 매우 빠르고 많은것을 기억할 수 있기 때문에 매우 유용할 것이다.
만약 우리가 이런 컴퓨터 언어를 알고 있다면, 사람을 대신해서 반복적인 작업을 하도록 컴퓨터에게 지시할 수도 있다.
흥미롭게도 컴퓨터가 가장 잘 할수 있는 일들은 사람들이 지루하거나, 하고 있으면 정신이 멍해지는 대게는 그런 일들이다.

예를들면, 이번 장의 첫 3문단에서 가장 많이 사용되 단어가 어떤 단어이고, 몇번이나 사용되었는가 찾는 일이다.
여러분은 여러개의 단어들을 단지 몇 초안에 읽고 이해할수 있겠지만, 아마도 각 단어들의 빈도수를 세는 일은 고통스러울 것이다. 왜냐하면, 사람의 두뇌는 이러한 종류의 문제에 맞게 만들어 진것이 아니기 때문이다.
컴퓨터에게는 반대로, 사람들처럼 종이에 쓰인 글을 읽고 이해하는것은 어려운 일이지만, 각 단어들의 사용빈도수를 세어 가장 많이 사용된 단어가 몇번 사용되었는지 알려주는 일은 아주 간단한 일이다:

~~~~ {.python}
    python words.py
    Enter file:words.txt
    to 16
~~~~

우리들의 "정보분석 보조자" 는 이번 장의 첫 3문단에서 단어 "to"가 가장 많이 사용되었고, 16번 언급되었다고 바로 답을 준다.

이러한 사람이 잘 하지 못하는것을 컴퓨터가 잘 할 수 있다는 사실이 왜 "컴퓨터 언어"에 능숙해져야 하는가를 잘 뒷받침하고 있다.
이 새로운 언어(Python)를 배우고 나면, 지루하고 반복되는 일은 우리의 파트너(Computer)에게 맡기고, 우리는 사람에게 적합한 일을 하는데 보다 많은 시간을 할애할 수 있게된다.
여러분은 컴퓨터와의 관계에서 독창성, 직관 그리고 창의성의 영역을 맡아 나아갈것이다.

창의성과 동기
-------------------------

이 책은 업으로서 프로그래밍을 하는 사람을 위한 것은 아니지만, 직업적으로 프로그램을 만드는 일은 금전적인 면이나 개인적인 면에서 꽤 매력적인 일이다. 다른사람이 사용할 수 있도록 유용하면서 세련되고 똑똑한 프로그램을 만드는 것은 매우 창의적인 활동이다. 사용자의 관심과 시선을 차지하기 위해 여러 그룹의 프로그래머들이 경쟁적으로 작성한 다양한 종류의 프로그램이 바로 여러분의 컴퓨터나 개인 휴대 정보 단말기(Personal Digital Assistant, PDA)에 담겨있다. 프로그래머들은 개발과정에서 사용자의 원하는 바를 충족시키고 훌륭한 사용자 경험을 제공하려고 노력한다. 대게의 경우에 있어서 사용자의 소프트웨어 선택이 프로그래머에게는 금전적 보상으로 연결되게 된다.

만약 프로그램을 프로그래머 그룹의 창의적인 결과물로 생각해본다면, 아마도 다음 그림이 좀더 의미있는 PDA로 보일것이다.

![Programmers Talking to You](height=1.0in@../images/pda2)

지금 우리의 동기는 돈을 번다던가 사용자를 기쁘게 한다기 보다, 일상생활에서 마주치게될 데이터나 정보를 다룰때 좀 더 생산적이려는데 있다. 프로그래밍을 배우기 시작할때, 여러분은 프로그래머이면서 동시에 자신이 만든 프로그램의 사용자가 될 것이다. 프로그래머로서 기술을 습득하고 프로그래밍이 좀 더 창의적으로 느껴진다면, 여러분은 다른사람을 위해 프로그램을 개발할 준비가 된 것이다.

컴퓨터 하드웨어 아키텍처
------------------------------

\index{hardware}
\index{hardware!architecture}

Before we start learning the language we speak to give instructions to
computers to develop software, we need to learn a small amount about how
computers are built. If you were to take apart your computer or cell
phone and look deep inside, you would find the following parts:

![Hardware Archicture](height=1.75in@../images/arch)

The high-level definitions of these parts are as follows:

-   The *Central Processing Unit* (or CPU) is the part of
    the computer that is built to be obsessed with "what is next?" If
    your computer is rated at 3.0 Gigahertz, it means that the CPU will
    ask "What next?" three billion times per second. You are going to
    have to learn how to talk fast to keep up with the CPU.

-   The *Main Memory* is used to store information that
    the CPU needs in a hurry. The main memory is nearly as fast as the
    CPU. But the information stored in the main memory vanishes when the
    computer is turned off.

-   The *Secondary Memory* is also used to store
    information, but it is much slower than the main memory. The
    advantage of the secondary memory is that it can store information
    even when there is no power to the computer. Examples of secondary
    memory are disk drives or flash memory (typically found in USB
    sticks and portable music players).

-   The *Input and Output Devices* are simply our screen,
    keyboard, mouse, microphone, speaker, touchpad, etc. They are all of
    the ways we interact with the computer.

-   These days, most computers also have a *Network
    Connection* to retrieve information over a network. We can
    think of the network as a very slow place to store and retrieve data
    that might not always be "up". So in a sense, the network is a
    slower and at times unreliable form of *Secondary
    Memory*.

While most of the detail of how these components work is best left to
computer builders, it helps to have some terminology so we can talk
about these different parts as we write our programs.

As a programmer, your job is to use and orchestrate each of these
resources to solve the problem that you need to solve and analyze the
data you get from the solution. As a programmer you will mostly be
"talking" to the CPU and telling it what to do next. Sometimes you will
tell the CPU to use the main memory, secondary memory, network, or the
input/output devices.

![Where Are You?](height=1.75in@../images/arch2)

You need to be the person who answers the CPU's "What next?" question.
But it would be very uncomfortable to shrink you down to 5mm tall and
insert you into the computer just so you could issue a command three
billion times per second. So instead, you must write down your
instructions in advance. We call these stored instructions a
*program* and the act of writing these instructions down
and getting the instructions to be correct *programming*.

Understanding programming
-------------------------

In the rest of this book, we will try to turn you into a person who is
skilled in the art of programming. In the end you will be a
*programmer* - perhaps not a professional programmer, but
at least you will have the skills to look at a data/information analysis
problem and develop a program to solve the problem.

\index{problem solving}

In a sense, you need two skills to be a programmer:

-   First, you need to know the programming language (Python) - you need
    to know the vocabulary and the grammar. You need to be able to spell
    the words in this new language properly and know how to construct
    well-formed "sentences" in this new language.

-   Second, you need to "tell a story". In writing a story, you combine
    words and sentences to convey an idea to the reader. There is a
    skill and art in constructing the story, and skill in story writing
    is improved by doing some writing and getting some feedback. In
    programming, our program is the "story" and the problem you are
    trying to solve is the "idea".

Once you learn one programming language such as Python, you will find it
much easier to learn a second programming language such as JavaScript or
C++. The new programming language has very different vocabulary and
grammar but the problem-solving skills will be the same across all
programming languages.

You will learn the "vocabulary" and "sentences" of Python pretty
quickly. It will take longer for you to be able to write a coherent
program to solve a brand-new problem. We teach programming much like we
teach writing. We start reading and explaining programs, then we write
simple programs, and then we write increasingly complex programs over
time. At some point you "get your muse" and see the patterns on your own
and can see more naturally how to take a problem and write a program
that solves that problem. And once you get to that point, programming
becomes a very pleasant and creative process.

We start with the vocabulary and structure of Python programs. Be
patient as the simple examples remind you of when you started reading
for the first time.

Words and sentences
-------------------

\index{programming language}
\index{language!programming}

Unlike human languages, the Python vocabulary is actually pretty small.
We call this "vocabulary" the "reserved words". These are words that
have very special meaning to Python. When Python sees these words in a
Python program, they have one and only one meaning to Python. Later as
you write programs you will make up your own words that have meaning to
you called *variables*. You will have great latitude in
choosing your names for your variables, but you cannot use any of
Python's reserved words as a name for a variable.

When we train a dog, we use special words like "sit", "stay", and
"fetch". When you talk to a dog and don't use any of the reserved words,
they just look at you with a quizzical look on their face until you say
a reserved word. For example, if you say, "I wish more people would walk
to improve their overall health", what most dogs likely hear is, "blah
blah blah *walk* blah blah blah blah." That is because
"walk" is a reserved word in dog language. Many might suggest that the
language between humans and cats has no reserved words^[<http://xkcd.com/231/>].

The reserved words in the language where humans talk to Python include
the following:

    and       del       global      not       with
    as        elif      if          or        yield
    assert    else      import      pass      
    break     except    in          raise
    class     finally   is          return
    continue  for       lambda      try
    def       from      nonlocal    while    

That is it, and unlike a dog, Python is already completely trained. When
you say "try", Python will try every time you say it without fail.

We will learn these reserved words and how they are used in good time,
but for now we will focus on the Python equivalent of "speak" (in
human-to-dog language). The nice thing about telling Python to speak is
that we can even tell it what to say by giving it a message in quotes:

~~~~ {.python}
    print('Hello world!')
~~~~

And we have even written our first syntactically correct Python
sentence. Our sentence starts with the function *print*
followed by a string of text of our choosing enclosed in single quotes.

Conversing with Python
----------------------

Now that we have a word and a simple sentence that we know in Python, we
need to know how to start a conversation with Python to test our new
language skills.

Before you can converse with Python, you must first install the Python
software on your computer and learn how to start Python on your
computer. That is too much detail for this chapter so I suggest that you
consult [www.py4e.com](http://www.py4e.com) where I have detailed
instructions and screencasts of setting up and starting Python on
Macintosh and Windows systems. At some point, you will be in a terminal
or command window and you will type *python* and the
Python interpreter will start executing in interactive mode and appear
somewhat as follows:

\index{interactive mode}

~~~~ {.python}
    Python 3.5.1 (v3.5.1:37a07cee5969, Dec  6 2015, 01:54:25)
    [MSC v.1900 64 bit (AMD64)] on win32
    Type "help", "copyright", "credits" or "license" for more information.
    >>>
~~~~

The `>>>` prompt is the Python interpreter's way of asking
you, "What do you want me to do next?" Python is ready to have a
conversation with you. All you have to know is how to speak the Python
language.

Let's say for example that you did not know even the simplest Python
language words or sentences. You might want to use the standard line
that astronauts use when they land on a faraway planet and try to speak
with the inhabitants of the planet:

~~~~ {.python}
    >>> I come in peace, please take me to your leader
      File "<stdin>", line 1
        I come in peace, please take me to your leader
             ^
    SyntaxError: invalid syntax
    >>>
~~~~

This is not going so well. Unless you think of something quickly, the
inhabitants of the planet are likely to stab you with their spears, put
you on a spit, roast you over a fire, and eat you for dinner.

Luckily you brought a copy of this book on your travels, and you thumb
to this very page and try again:

~~~~ {.python}
    >>> print('Hello world!')
    Hello world!
~~~~

This is looking much better, so you try to communicate some more:

~~~~ {.python}
    >>> print('You must be the legendary god that comes from the sky')
    You must be the legendary god that comes from the sky
    >>> print('We have been waiting for you for a long time')
    We have been waiting for you for a long time
    >>> print('Our legend says you will be very tasty with mustard')
    Our legend says you will be very tasty with mustard
    >>> print 'We will have a feast tonight unless you say
      File "<stdin>", line 1
        print 'We will have a feast tonight unless you say
                                                         ^
    SyntaxError: Missing parentheses in call to 'print'
    >>>
~~~~

The conversation was going so well for a while and then you made the
tiniest mistake using the Python language and Python brought the spears
back out.

At this point, you should also realize that while Python is amazingly
complex and powerful and very picky about the syntax you use to
communicate with it, Python is *not* intelligent. You are
really just having a conversation with yourself, but using proper
syntax.

In a sense, when you use a program written by someone else the
conversation is between you and those other programmers with Python
acting as an intermediary. Python is a way for the creators of programs
to express how the conversation is supposed to proceed. And in just a
few more chapters, you will be one of those programmers using Python to
talk to the users of your program.

Before we leave our first conversation with the Python interpreter, you
should probably know the proper way to say "good-bye" when interacting
with the inhabitants of Planet Python:

~~~~ {.python}
    >>> good-bye
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    NameError: name 'good' is not defined
    >>> if you don't mind, I need to leave
      File "<stdin>", line 1
        if you don't mind, I need to leave
                 ^
    SyntaxError: invalid syntax
    >>> quit()
~~~~

You will notice that the error is different for the first two incorrect
attempts. The second error is different because *if* is a
reserved word and Python saw the reserved word and thought we were
trying to say something but got the syntax of the sentence wrong.

The proper way to say "good-bye" to Python is to enter
*quit()* at the interactive chevron `>>>`
prompt. It would have probably taken you quite a while to guess that
one, so having a book handy probably will turn out to be helpful.

Terminology: interpreter and compiler
-------------------------------------

Python is a *high-level* language intended to be
relatively straightforward for humans to read and write and for
computers to read and process. Other high-level languages include Java,
C++, PHP, Ruby, Basic, Perl, JavaScript, and many more. The actual
hardware inside the Central Processing Unit (CPU) does not understand
any of these high-level languages.

The CPU understands a language we call *machine
language*. Machine language is very simple and frankly very
tiresome to write because it is represented all in zeros and ones:

~~~~
    001010001110100100101010000001111
    11100110000011101010010101101101
    ...
~~~~

Machine language seems quite simple on the surface, given that there are
only zeros and ones, but its syntax is even more complex and far more
intricate than Python. So very few programmers ever write machine
language. Instead we build various translators to allow programmers to
write in high-level languages like Python or JavaScript and these
translators convert the programs to machine language for actual
execution by the CPU.

Since machine language is tied to the computer hardware, machine
language is not *portable* across different types of
hardware. Programs written in high-level languages can be moved between
different computers by using a different interpreter on the new machine
or recompiling the code to create a machine language version of the
program for the new machine.

These programming language translators fall into two general categories:
(1) interpreters and (2) compilers.

An *interpreter* reads the source code of the program as
written by the programmer, parses the source code, and interprets the
instructions on the fly. Python is an interpreter and when we are
running Python interactively, we can type a line of Python (a sentence)
and Python processes it immediately and is ready for us to type another
line of Python.

Some of the lines of Python tell Python that you want it to remember
some value for later. We need to pick a name for that value to be
remembered and we can use that symbolic name to retrieve the value
later. We use the term *variable* to refer to the labels
we use to refer to this stored data.

~~~~ {.python}
    >>> x = 6
    >>> print(x)
    6
    >>> y = x * 7
    >>> print(y)
    42
    >>>
~~~~

In this example, we ask Python to remember the value six and use the
label *x* so we can retrieve the value later. We verify
that Python has actually remembered the value using
*print*. Then we ask Python to retrieve
*x* and multiply it by seven and put the newly computed
value in *y*. Then we ask Python to print out the value
currently in *y*.

Even though we are typing these commands into Python one line at a time,
Python is treating them as an ordered sequence of statements with later
statements able to retrieve data created in earlier statements. We are
writing our first simple paragraph with four sentences in a logical and
meaningful order.

It is the nature of an *interpreter* to be able to have
an interactive conversation as shown above. A *compiler*
needs to be handed the entire program in a file, and then it runs a
process to translate the high-level source code into machine language
and then the compiler puts the resulting machine language into a file
for later execution.

If you have a Windows system, often these executable machine language
programs have a suffix of ".exe" or ".dll" which stand for "executable"
and "dynamic link library" respectively. In Linux and Macintosh, there
is no suffix that uniquely marks a file as executable.

If you were to open an executable file in a text editor, it would look
completely crazy and be unreadable:

~~~~
    ^?ELF^A^A^A^@^@^@^@^@^@^@^@^@^B^@^C^@^A^@^@^@\xa0\x82
    ^D^H4^@^@^@\x90^]^@^@^@^@^@^@4^@ ^@^G^@(^@$^@!^@^F^@
    ^@^@4^@^@^@4\x80^D^H4\x80^D^H\xe0^@^@^@\xe0^@^@^@^E
    ^@^@^@^D^@^@^@^C^@^@^@^T^A^@^@^T\x81^D^H^T\x81^D^H^S
    ^@^@^@^S^@^@^@^D^@^@^@^A^@^@^@^A\^D^HQVhT\x83^D^H\xe8
    ....
~~~~

It is not easy to read or write machine language, so it is nice that we
have *interpreters* and *compilers* that
allow us to write in high-level languages like Python or C.

Now at this point in our discussion of compilers and interpreters, you
should be wondering a bit about the Python interpreter itself. What
language is it written in? Is it written in a compiled language? When we
type "python", what exactly is happening?

The Python interpreter is written in a high-level language called "C".
You can look at the actual source code for the Python interpreter by
going to [www.python.org](http://www.python.org) and working your way to their
source code. So Python is a program itself and it is compiled into
machine code. When you installed Python on your computer (or the vendor
installed it), you copied a machine-code copy of the translated Python
program onto your system. In Windows, the executable machine code for
Python itself is likely in a file with a name like:

~~~~
    C:\Python35\python.exe
~~~~

That is more than you really need to know to be a Python programmer, but
sometimes it pays to answer those little nagging questions right at the
beginning.

Writing a program
-----------------

Typing commands into the Python interpreter is a great way to experiment
with Python's features, but it is not recommended for solving more
complex problems.

When we want to write a program, we use a text editor to write the
Python instructions into a file, which is called a
*script*. By convention, Python scripts have names that
end with `.py`.

\index{script}

To execute the script, you have to tell the Python interpreter the name
of the file. In a Unix or Windows command window, you would type
`python hello.py` as follows:

~~~~ {.bash}
    csev$ cat hello.py
    print('Hello world!')
    csev$ python hello.py
    Hello world!
    csev$
~~~~

The "csev\$" is the operating system prompt, and the "cat hello.py" is
showing us that the file "hello.py" has a one-line Python program to
print a string.

We call the Python interpreter and tell it to read its source code from
the file "hello.py" instead of prompting us for lines of Python code
interactively.

You will notice that there was no need to have *quit()*
at the end of the Python program in the file. When Python is reading
your source code from a file, it knows to stop when it reaches the end
of the file.

What is a program?
------------------

The definition of a *program* at its most basic is a
sequence of Python statements that have been crafted to do something.
Even our simple *hello.py* script is a program. It is a
one-line program and is not particularly useful, but in the strictest
definition, it is a Python program.

It might be easiest to understand what a program is by thinking about a
problem that a program might be built to solve, and then looking at a
program that would solve that problem.

Lets say you are doing Social Computing research on Facebook posts and
you are interested in the most frequently used word in a series of
posts. You could print out the stream of Facebook posts and pore over
the text looking for the most common word, but that would take a long
time and be very mistake prone. You would be smart to write a Python
program to handle the task quickly and accurately so you can spend the
weekend doing something fun.

For example, look at the following text about a clown and a car. Look at
the text and figure out the most common word and how many times it
occurs.

~~~~
    the clown ran after the car and the car ran into the tent
    and the tent fell down on the clown and the car
~~~~

Then imagine that you are doing this task looking at millions of lines
of text. Frankly it would be quicker for you to learn Python and write a
Python program to count the words than it would be to manually scan the
words.

The even better news is that I already came up with a simple program to
find the most common word in a text file. I wrote it, tested it, and now
I am giving it to you to use so you can save some time.

\VerbatimInput{../code3/words.py}
\begin{trinketfiles}
../code3/words.txt
\end{trinketfiles}

You don't even need to know Python to use this program. You will need to
get through Chapter 10 of this book to fully understand the awesome
Python techniques that were used to make the program. You are the end
user, you simply use the program and marvel at its cleverness and how it
saved you so much manual effort. You simply type the code into a file
called *words.py* and run it or you download the source
code from <http://www.py4e.com/code3/> and run it.

\index{program}

This is a good example of how Python and the Python language are acting
as an intermediary between you (the end user) and me (the programmer).
Python is a way for us to exchange useful instruction sequences (i.e.,
programs) in a common language that can be used by anyone who installs
Python on their computer. So neither of us are talking *to
Python*, instead we are communicating with each other
*through* Python.

The building blocks of programs
-------------------------------

In the next few chapters, we will learn more about the vocabulary,
sentence structure, paragraph structure, and story structure of Python.
We will learn about the powerful capabilities of Python and how to
compose those capabilities together to create useful programs.

There are some low-level conceptual patterns that we use to construct
programs. These constructs are not just for Python programs, they are
part of every programming language from machine language up to the
high-level languages.

input
:   Get data from the "outside world". This might be reading data from a
    file, or even some kind of sensor like a microphone or GPS. In our
    initial programs, our input will come from the user typing data on
    the keyboard.

output
:   Display the results of the program on a screen or store them in a
    file or perhaps write them to a device like a speaker to play music
    or speak text.

sequential execution
:   Perform statements one after another in the order they are
    encountered in the script.

conditional execution
:   Check for certain conditions and then execute or skip a sequence of
    statements.

repeated execution
:   Perform some set of statements repeatedly, usually with some
    variation.

reuse
:   Write a set of instructions once and give them a name and then reuse
    those instructions as needed throughout your program.

It sounds almost too simple to be true, and of course it is never so
simple. It is like saying that walking is simply "putting one foot in
front of the other". The "art" of writing a program is composing and
weaving these basic elements together many times over to produce
something that is useful to its users.

The word counting program above directly uses all of these patterns
except for one.

What could possibly go wrong?
-----------------------------

As we saw in our earliest conversations with Python, we must communicate
very precisely when we write Python code. The smallest deviation or
mistake will cause Python to give up looking at your program.

Beginning programmers often take the fact that Python leaves no room for
errors as evidence that Python is mean, hateful, and cruel. While Python
seems to like everyone else, Python knows them personally and holds a
grudge against them. Because of this grudge, Python takes our perfectly
written programs and rejects them as "unfit" just to torment us.

~~~~ {.python}
    >>> primt 'Hello world!'
      File "<stdin>", line 1
        primt 'Hello world!'
                           ^
    SyntaxError: invalid syntax
    >>> primt ('Hello world')
    Traceback (most recent call last):
    File "<stdin>", line 1, in <module>
    NameError: name 'primt' is not defined

    >>> I hate you Python!
      File "<stdin>", line 1
        I hate you Python!
             ^
    SyntaxError: invalid syntax
    >>> if you come out of there, I would teach you a lesson
      File "<stdin>", line 1
        if you come out of there, I would teach you a lesson
                  ^
    SyntaxError: invalid syntax
    >>>
~~~~

There is little to be gained by arguing with Python. It is just a tool.
It has no emotions and it is happy and ready to serve you whenever you
need it. Its error messages sound harsh, but they are just Python's call
for help. It has looked at what you typed, and it simply cannot
understand what you have entered.

Python is much more like a dog, loving you unconditionally, having a few
key words that it understands, looking you with a sweet look on its face
(`>>>`), and waiting for you to say something it
understands. When Python says "SyntaxError: invalid syntax", it is
simply wagging its tail and saying, "You seemed to say something but I
just don't understand what you meant, but please keep talking to me
(`>>>`)."

As your programs become increasingly sophisticated, you will encounter
three general types of errors:

Syntax errors
:   These are the first errors you will make and the easiest to fix. A
    syntax error means that you have violated the "grammar" rules of
    Python. Python does its best to point right at the line and
    character where it noticed it was confused. The only tricky bit of
    syntax errors is that sometimes the mistake that needs fixing is
    actually earlier in the program than where Python
    *noticed* it was confused. So the line and character
    that Python indicates in a syntax error may just be a starting point
    for your investigation.

Logic errors
:   A logic error is when your program has good syntax but there is a
    mistake in the order of the statements or perhaps a mistake in how
    the statements relate to one another. A good example of a logic
    error might be, "take a drink from your water bottle, put it in your
    backpack, walk to the library, and then put the top back on the
    bottle."

Semantic errors
:   A semantic error is when your description of the steps to take is
    syntactically perfect and in the right order, but there is simply a
    mistake in the program. The program is perfectly correct but it does
    not do what you *intended* for it to do. A simple
    example would be if you were giving a person directions to a
    restaurant and said, "...when you reach the intersection with the
    gas station, turn left and go one mile and the restaurant is a red
    building on your left." Your friend is very late and calls you to
    tell you that they are on a farm and walking around behind a barn,
    with no sign of a restaurant. Then you say "did you turn left or
    right at the gas station?" and they say, "I followed your directions
    perfectly, I have them written down, it says turn left and go one
    mile at the gas station." Then you say, "I am very sorry, because
    while my instructions were syntactically correct, they sadly
    contained a small but undetected semantic error.".

Again in all three types of errors, Python is merely trying its hardest
to do exactly what you have asked.

The learning journey
--------------------

As you progress through the rest of the book, don't be afraid if the
concepts don't seem to fit together well the first time. When you were
learning to speak, it was not a problem for your first few years that
you just made cute gurgling noises. And it was OK if it took six months
for you to move from simple vocabulary to simple sentences and took 5-6
more years to move from sentences to paragraphs, and a few more years to
be able to write an interesting complete short story on your own.

We want you to learn Python much more rapidly, so we teach it all at the
same time over the next few chapters. But it is like learning a new
language that takes time to absorb and understand before it feels
natural. That leads to some confusion as we visit and revisit topics to
try to get you to see the big picture while we are defining the tiny
fragments that make up that big picture. While the book is written
linearly, and if you are taking a course it will progress in a linear
fashion, don't hesitate to be very nonlinear in how you approach the
material. Look forwards and backwards and read with a light touch. By
skimming more advanced material without fully understanding the details,
you can get a better understanding of the "why?" of programming. By
reviewing previous material and even redoing earlier exercises, you will
realize that you actually learned a lot of material even if the material
you are currently staring at seems a bit impenetrable.

Usually when you are learning your first programming language, there are
a few wonderful "Ah Hah!" moments where you can look up from pounding
away at some rock with a hammer and chisel and step away and see that
you are indeed building a beautiful sculpture.

If something seems particularly hard, there is usually no value in
staying up all night and staring at it. Take a break, take a nap, have a
snack, explain what you are having a problem with to someone (or perhaps
your dog), and then come back to it with fresh eyes. I assure you that
once you learn the programming concepts in the book you will look back
and see that it was all really easy and elegant and it simply took you a
bit of time to absorb it.

Glossary
--------

bug
:   An error in a program.
\index{bug}

central processing unit
:   The heart of any computer. It is what runs the software that we
    write; also called "CPU" or "the processor".
\index{central processing unit}
\index{CPU}

compile
:   To translate a program written in a high-level language into a
    low-level language all at once, in preparation for later execution.
\index{compile}

high-level language
:   A programming language like Python that is designed to be easy for
    humans to read and write.
\index{high-level language}

interactive mode
:   A way of using the Python interpreter by typing commands and
    expressions at the prompt.
\index{interactive mode}

interpret
:   To execute a program in a high-level language by translating it one
    line at a time.
\index{interpret}

low-level language
:   A programming language that is designed to be easy for a computer to
    execute; also called "machine code" or "assembly language".
\index{low-level language}

machine code
:   The lowest-level language for software, which is the language that
    is directly executed by the central processing unit (CPU).
\index{machine code}

main memory
:   Stores programs and data. Main memory loses its information when the
    power is turned off.
\index{main memory}

parse
:   To examine a program and analyze the syntactic structure.
\index{parse}

portability
:   A property of a program that can run on more than one kind of
    computer.
\index{portability}

print function
:   An instruction that causes the Python interpreter to display a value
    on the screen.
\index{print function}
\index{function!print}

problem solving
:   The process of formulating a problem, finding a solution, and
    expressing the solution.
\index{problem solving}

program
:   A set of instructions that specifies a computation.
\index{program}

prompt
:   When a program displays a message and pauses for the user to type
    some input to the program.
\index{prompt}

secondary memory
:   Stores programs and data and retains its information even when the
    power is turned off. Generally slower than main memory. Examples of
    secondary memory include disk drives and flash memory in USB sticks.
\index{secondary memory}

semantics
:   The meaning of a program.
\index{semantics}

semantic error
:   An error in a program that makes it do something other than what the
    programmer intended.
\index{semantic error}

source code
:   A program in a high-level language.
\index{source code}

Exercises
---------

Exercise 1: What is the function of the secondary memory in a computer?

a\) Execute all of the computation and logic of the program\
b) Retrieve web pages over the Internet\
c) Store information for the long term, even beyond a power cycle\
d) Take input from the user

Exercise 2: What is a program?

Exercise 3: What is the difference between a compiler and an
interpreter?

Exercise 4: Which of the following contains "machine code"?

a\) The Python interpreter\
b) The keyboard\
c) Python source file\
d) A word processing document

Exercise 5: What is wrong with the following code:

~~~~ {.python}
    >>> primt 'Hello world!'
      File "<stdin>", line 1
        primt 'Hello world!'
                           ^
    SyntaxError: invalid syntax
    >>>
~~~~

Exercise 6: Where in the computer is a variable such as "X" stored after
the following Python line finishes?

~~~~ {.python}
    x = 123
~~~~

a\) Central processing unit\
b) Main Memory\
c) Secondary Memory\
d) Input Devices\
e) Output Devices

Exercise 7: What will the following program print out:

~~~~ {.python}
    x = 43
    x = x + 1
    print(x)
~~~~

a\) 43\
b) 44\
c) x + 1\
d) Error because x = x + 1 is not possible mathematically

Exercise 8: Explain each of the following using an example of a human
capability: (1) Central processing unit, (2) Main Memory, (3) Secondary
Memory, (4) Input Device, and (5) Output Device. For example, "What is
the human equivalent to a Central Processing Unit"?

Exercise 9: How do you fix a "Syntax Error"?
